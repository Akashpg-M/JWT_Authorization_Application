src/pages/EmailVerificationPage:
import { useRef, useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { useAuthStore } from "../store/authStore";
import toast  from "react-hot-toast";

const EmailVerificationPage = () => {
  
  const [code, setCode]= useState(["", "", "", "", "", ""]);
  const inputRefs = useRef([]);
  const navigate = useNavigate();

  const { error, isLoading, verifyEmail } = useAuthStore();

  //automatically move to the next field when a field is entered
  const handleChange = ( index, value ) => {
    const newCode = [...code];

    //Handel pasted content
    if(value.length > 1){
      const pastedCode = value.slice(0, 6).split("");
      for(let i=0; i<6; i++){
        newCode[i] = pastedCode[i] || "";
      }
      setCode(newCode);

      //focus on the Lastnon-empty input or the first empty one
      const lastFilledIndex = newCode.findLastIndex((digit) => digit !== "");
      const focusIndex = lastFilledIndex < 5 ? lastFilledIndex + 1 : 5;
      inputRefs.current[focusIndex].focus();
    }else{
      newCode[index] = value;
      setCode(newCode);

      //Move focus to next input field if value is entered
      if(value && index < 5){
        inputRefs.current[index + 1].focus();
      }
    }
  };

  const handleKeyDown = ( index, e ) => {
    if(e.key === "Backspace" && !code[index] && index > 0){
      inputRefs.current[index-1]?.focus();
    }
  };

  const handleSubmit = async(e) => {
    e.preventDefault();
    const verificationCode = code.join("");
    try{
      await verifyEmail(verificationCode);
      toast.success("email verified successfully");
      navigate("/");
    }catch(error){
      console.log(error);
    }
    console.log(`Verification code submitted: ${verificationCode}`);
  }
  
  //Auto submit when all fields are filled
  // useEffect(() => {
  //   if(code.every(digit => digit !== '')) {
  //     handleSubmit(new Event('submit'));
  //   }
  // },[code]);

  return (
    <div>
      <motion.div>
        <h2> verify your Email</h2>
        <p>Enter the 6-digit code sent to your email address</p>

        <form onSubmit={handleSubmit}>
          <div>
            {code.map((digit, index) => (
              <input
                key = {index}
                ref = {(el) => (inputRefs.current[index] = el)}
                type='text'
                maxLength='6'
                value={digit}
                onChange ={(e) => handleChange(index, e.target.value)}
                onKeyDown={(e) => handleKeyDown(index, e)}
              />
            ))}
          </div>
          {error && <p className = 'text-red-500 font-semibold mt-2'>{error}</p>}
          <motion.button
            whileHover = {{ scale: 1.05 }}
            whileTap = {{ scale: 0.95 }}
            type='submit'
            disabled={isLoading || code.some((digit) => !digit)}
          >
            {isLoading ? "Verifying..." : "Verify Email"}
          </motion.button>
        </form>
      </motion.div>
    </div>
  );
};

export default EmailVerificationPage;

src/pages/LoginPage
import {useState} from "react";
import { motion } from "framer-motion";
import { Mail, Lock, Loader} from "lucide-react";
import { Link } from "react-router-dom";
import Input from "../components/Input";
import { useAuthStore } from "../store/authStore";

const LoginPage = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const { login, isLoading, error } = useAuthStore();
  
  const handleLogin = async(e) => {
    e.preventDefault();
    await login(email, password);
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="max-w-md w-full bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-xl rounded-2xl shadow-xl overflow-hidden"
    >
      <div className = 'p-8'>
        <h2>
          Welcome Back
        </h2>

        <form onSubmit = {handleLogin}>
          <Input
            icon={Mail}
            type='email'
            placeholder='email Address'
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />

          <Input    
            icon={Lock}
            type='password'
            placeholder='Password'
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />

          <div>
            <Link to='/forgot-password'>
              Forgot password?
            </Link>
          </div>

          {error && <p className='text-red-500 font-semibold mb-2'>{error}</p>}

          <motion.button
            whileHover={{scale: 1.02 }}
            whileTap={{scale: 0.98}}
            type='submit'
            disabled={isLoading}
          >

            {isLoading ? <Loader className='w-6 h-6 animate-spin  mx-auto' /> : "Login"}
          </motion.button>
        </form>
      </div>

      <div>
        <p>
          Dont have an account?{" "}
          <Link to="/signup">
            Sign up
          </Link>
        </p>
      </div>
    </motion.div>
  )
}


export default LoginPage;


src/pages/SignUpPage
import { useState } from "react";
import { motion } from "framer-motion";
import { Link, useNavigate } from "react-router-dom";
import Input from "../components/Input";
import PasswordStrengthMeter from "../components/PasswordStrengthMeter";
import { Loader, User, Mail, Lock, Phone } from "lucide-react";
import { useAuthStore } from "../store/authStore";

const SignUpPage = () => {
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [phone, setPhone] = useState("");
    const navigate = useNavigate();
    
    const { signup, error, isLoading } = useAuthStore();
    const handleSignUp = async(e) => {
        e.preventDefault();

        try{
          await signup(email, password, name, phone);
          navigate("/verify-email");
        }catch(error){
          console.log(error)
        }
    }

    return ( 
        <motion.div>
            <div className = 'p-8'>
                <h2>
                    create Account
                </h2>

                <form onSubmit = {handleSignUp}>
                    <Input
                      icon={User}
                      text = 'text'
                      placeholder = 'Full Name'
                      value = {name}
                      onChange ={ (e) => setName(e.target.value)}
                    />

                    <Input
                      icon={Mail}
                      text = 'email'
                      placeholder = 'Email Address'
                      value = {email}
                      onChange ={ (e) => setEmail(e.target.value)}
                    />

                    <Input
                      icon={Lock}
                      text = 'password'
                      placeholder = 'Password'
                      value = {password}
                      onChange ={ (e) => setPassword(e.target.value)}
                    />

                    <Input
                      icon={Phone}
                      text="phone"
                      placeholder="Phone Number"
                      value={phone}
                      onChange={(e) => setPhone(e.target.value)}
                    />


                    {error && <p className='text-red-500 font-semibold mt-2'>{error}</p>}
                    <PasswordStrengthMeter password={password} />

                    <motion.button
                      whileHover = {{ scale: 1.02 }}
                      whileTap={{scale: 0.98}}
                      type = 'submit'
                      disabled={isLoading}
                      >
                        {isLoading ? <Loader className=' animate-spin mx-auto' size={24}/> : "Sign Up"}
                    </motion.button>
                </form>
            </div>
            
            <div>
                <p>
                    Already have an Account?{" "}
                    <Link to={"/login"}>
                      Login
                    </Link>
                </p>  
            </div>

        </motion.div>
    );
};

export default SignUpPage;

src/store/authStore
import { create }  from "zustand";
import axios from "axios";

const API_URL = "http://localhost:5000/api/auth";

axios.defaults.withCredentials = true;

export const useAuthStore = create((set) => ({
  user: null,
  isAuthenticated: false,
  error:null,
  isLoading:false,
  isCheckingAuth:true,

  signup: async(email, password, name, phone) => {
    set({isLoading: true, error:null});
    try {
      const response = await axios.post(`${API_URL}/signup`, {email,password,username: name,phone});
      set({user:response.data.user, isAuthenticated:true, isLoading:false});
    }catch(error) {
      set({error:error.response.data.message || "Error signing up", isLoading:false});
      throw error;
    }
  },

  login: async ( email, password ) => {
    set({ isLoading: true, error: null });
    try{
      const response = await axios.post(`${API_URL}/login`, {email, password});
      set({
        isAuthenticated: true,
        user: response.data.user,
        error: null,
        isLoading: false,
      });
    }catch(error){
      set({ error: error.response?.data?.message || "Error logging in", isLoading: false});
      throw error;
    }
  },

  logout: async () => {
    set({isLoading: true, error: null});
    try{
      await axios.post(`${API_URL}/logout`);
      set({user: null, isAuthenticated: false, error: null, isLoading: false});
    }catch (error) {
      set({error: "Error logging out", isLoading: false});
      throw error;
    }
  },

  verifyEmail: async (code) => {
    set({ isLoading: true, error: null });
    try {
      const response = await axios.post(`${API_URL}/verify-email`, {code});
      set({ user: response.data.user, isAuthenticated: true, isLoading: false});
      return response.data;
    } catch(error){
      set({error: error.response.data.message || "Error verifing email", isLoading: false});
      throw error;
    }
  },

  // checkAuth: async()=> {
  //   set({ isCheckingAuth: true, error: null});
  //   try{
  //     const response = await axios.get(`${API_URL}/check-auth`);
  //     set({user: response.data.user, isAuthenticated: true, isCheckingAuth: false});
  //   }catch(error){
  //     set({error: null, isCheckingAuth: false, isAuthenticated: false })
  //   }
  // }
  checkAuth: async()=> {
    set({ isCheckingAuth: true, error: null});
    try{
      const response = await axios.get(`${API_URL}/check-auth`);
      console.log("checkAuth response:", response.data); // Debugging
      set({user: response.data.user, isAuthenticated: true, isCheckingAuth: false});
    }catch(error){
      console.log("checkAuth error:", error); // Debugging
      set({error: null, isCheckingAuth: false, isAuthenticated: false })
    }
  }

  
}));

src/app.jsx
import { Navigate, Routes, Route } from 'react-router-dom';

import DashboardPage from './pages/DashboardPage';
import SignUpPage from './pages/SignUpPage';
import LoginPage from './pages/LoginPage';
import EmailVerificationPage from "./pages/EmailVerificationPage";

import LoadingSpinner from './components/LoadingSpinner';

import { Toaster } from "react-hot-toast";
import { useAuthStore } from "./store/authStore";
import { useEffect } from "react";


const ProtectedRoute = ({ children }) => {
  const { isAuthenticated, user } = useAuthStore();

  if(!isAuthenticated){
    return <Navigate to = '/login' replace />;
  }

  if(!user.isVerified){
    return <Navigate to='/verify-email' replace />;
  }

  return children;
}

//redirect Authenticated user
const RedirectAuthenticatedUser = ({children}) => {
  const { isAuthenticated, user } = useAuthStore();

  if(isAuthenticated && user.isVerified){
    return <Navigate to='/' replace />;
  }

  return children; // children = current page
}


function App() {
  console.log("App loaded");

  const {isCheckingAuth, checkAuth , isAuthenticated, user} = useAuthStore();

  useEffect(() => {
    checkAuth();
  },[checkAuth]);
  
  if(isCheckingAuth) return <LoadingSpinner />


  console.log("IsAuthenticated: ", isAuthenticated);
  console.log("user; ", user);

  return (
    <>
    <div>
      <h1 className = 'text-red-500 text-5xl'> Hello World </h1>
      <Routes>

        <Route 
          path='/' 
          element = {
            <ProtectedRoute>
              <DashboardPage/>
            </ProtectedRoute>
          }
        />

        <Route 
          path = '/signup' 
          element = {
          <RedirectAuthenticatedUser>
            <SignUpPage/>
          </RedirectAuthenticatedUser>
          }
        />

        <Route 
          path = '/login' 
          element = {
          <RedirectAuthenticatedUser>
            <LoginPage/>
          </RedirectAuthenticatedUser>
          } 
        />

        <Route  
          path = '/verify-email' 
          element= {
              <EmailVerificationPage />
          } 
        />

      </Routes>
      <Toaster />
    </div>
      
    </>
  )
}

export default App

