./controller
auth.controller.js
import bcryptjs from "bcryptjs";
import crypto from "crypto"

import { User } from "../models/user.model.js";
import { generateTokenAndSetCookie } from "../utils/generateTokenAndSetCookie.js"
import { sendVerificationEmail, sendWelcomeEmail, sendPasswordResetEmail, sendResetSuccessEmail } from "../mailtrap/emails.js";

export const signup = async (req, res) => {
    const { email, password, username, phone} = req.body;

    try{
        if(!email || !password || !username || !phone){
            throw new Error("All fields are required");
        }

        const userAlreadyExists = await User.findOne({email});
        
        if(userAlreadyExists){
            return res.status(400).json({success:false, message : "User Already Exist"});
        }

        const hashedPassword = await bcryptjs.hash(password, 10);
        const verificationToken = Math.floor(100000 + Math.random() * 900000).toString();

        const user = new User({
            email,
            password: hashedPassword,
            username,
            phone,
            verificationToken,
            verificationTokenExpiresAt: Date.now()+ 24 * 60 * 60 * 1000//24 hours
        })

        await user.save();

        generateTokenAndSetCookie(res, user._id)

        await sendVerificationEmail(user.email, verificationToken);
        
        res.status(201).json({
            success: true,
            message: "User created successfully",
            user:{
                ...user._doc,
                password: undefined 
            },
        }); 
    } catch(error) {
        res.status(400).json({success : false, message: error.message});
    }
};

export const verifyEmail = async(req, res) => {
    try{
        const { code } = req.body;

        console.log("Received code:", code); // Log the code sent in the request

        // const user = await User.findOne({
        //     verificationToken: code,
        //     verificationTokenExpirersAt: {$gt: Date.now()},
        // });
        const user = await User.findOne({
            verificationToken: code, // Token in the database matches the code sent in the request
            verificationTokenExpiresAt: { $gt: new Date() }, // Check if the token has not expired
        });
        
        console.log("User Name: ", user);

        if(!user){
            return res.status(400).json({success: false, message: "invalid code"});
        }

        user.isVerified = true;
        user.verificationToken = undefined;
        user.verificationTokenExpiresAt = undefined;
        await user.save();

        await sendWelcomeEmail(user.email, user.username);

        res.status(200).json({
            success: true,
            message: "Email verified successfully",
            user: {
                ...user._doc,
                password: undefined,
            },
        });
    }catch(error) {
        res.status(500).json({success : false, message: error.message});
    }
}

export const login = async (req, res)=>{
    // res.send("login Routes");
    const { email, password } = req.body;
    try{
        const user = await User.findOne({email});
        if(!user){
            return res.status(400).json({success: false, message: "Invalid credentials"});
        }
        const isPasswordValid = await bcryptjs.compare(password, user.password);

        if(!isPasswordValid){
            return res.status(400).json({success: false, message: "Invalid credentials"});
        }
    
        generateTokenAndSetCookie(res, user._id);

        user.lastlogin = new Date();
        await user.save();

        res.status(200).json({
            success: true,
            message: "Logged in successfully",
            user: {
                ...user._doc,
                password: undefined,
            },
        });

    }catch(error) {
        console.log("Error in login ", error);
        res.status(400).json({success : false, message: error.message});
    }    
};

export const logout = async (req, res)=>{
    res.clearCookie("token");
    res.status(200).json({success: true, message: "Logged out successfully"});
};

export const forgotPassword = async  (req, res) =>{
    const {email} = req.body;
    try {
        const user = await User.findOne({email});

        if(!user){
            return res.status(400).json({success: false, message: "user not found"});
        }

        const resetToken = crypto.randomBytes(20).toString("hex");
        const resetTokenExpiresAt = Date.now() + 1 * 60 * 60 * 1000; // 1 hour

        user.resetPasswordToken = resetToken;
        user.resetPasswordExpiresAt = resetTokenExpiresAt;

        await user.save();

        await sendPasswordResetEmail(user.email, `${process.env.CLIENT_URL}/reset-password/${resetToken}`);

        res.status(200).json({success: true, message: "Password reset link sent to your email"});

    }catch(error){
        console.log("Error in forgotPassword ", error);
        res.status(400).json({success: false, message: error.message});
    }
}

export const resetPassword = async(req, res) => {
     try{
        const {token} = req.params;
        const {password} = req.body;

        const user = await User.findOne({
            resetPasswordToken: token,
            resetPasswordExpiresAt: {$gt: Date.now()},
        });

        console.log("USER: ", user);
        
        if(!user){
            return res.status(400).json({success : false, message: "invalid or Epiered reset token"});
        }

        const hashedPassword = await bcryptjs.hash(password, 10);
        user.password = hashedPassword;
        user.resetPasswordToken = undefined,
        user.resetPasswordExpiresAt = undefined;

        await user.save();

        await sendResetSuccessEmail(user.email);

        res.status(200).json({success: true, message: " password reset Successfull"})
     }catch(error){
        console.log("Error in the resetPassword", error);
        res.status(400).json({success: false, message: error.message});
     }
}

export const checkAuth = async(req, res) => {
    try {
        console.log("UserId: ",req.userId);
        const user = await User.findById(req.userId).select("-password");
        console.log("Username : ", user);
        if(!user){
            return res.status(400).json({success: false, message: "User not found"});
        }

        res.status(200).json({ success: true, user});

    }catch(error){
        console.log("Error in checkAuth ", error);
        res.status(400).json({success: false, message: error.message});  
    }
}

./mailtrap
email.js
import {mailtrapClient, sender} from "./mailtrap.config.js"
import { VERIFICATION_EMAIL_TEMPLATE, WELCOME_EMAIL_TEMPLATE, PASSWORD_RESET_REQUEST_TEMPLATE, PASSWORD_RESET_SUCCESS_TEMPLATE} from "./emailTemplates.js"

export const sendVerificationEmail = async (email, verificationToken) => {
    const recipient = [{email}]

    try{
        const response = await mailtrapClient.send({
            from: sender,
            to: recipient,
            subject:"Verify your email",
            html : VERIFICATION_EMAIL_TEMPLATE.replace("{verificationCode}", verificationToken),
            category: "Email Verification"
        })

        console.log("Email sent successfully", response)
    }catch(error){
        console.log("Error sending Verification Email", error);
        throw new Error(`Error sending verification email: ${error}`)
    }
}

export const sendWelcomeEmail = async(email, username) => {
    const recipient = [{email}];

    try{
        const response = await mailtrapClient.send({
            from: sender,
            to: recipient,
            subject: "Welcome Email",
            html : WELCOME_EMAIL_TEMPLATE.replace("{username}", username),
            category : "Welcome Message"
        });

        console.log("Welcome Email Sent Successfully", response);
    } catch (error) {
        console.error("Error sending Welcome Email", error);
        throw new Error(`Error sending welcome email: ${error}`);
    }
};

export const sendPasswordResetEmail = async(email, resetURL) => {
    const recipient = [{email}];

    try{
        const response = await mailtrapClient.send({
            from : sender,
            to: recipient,
            subject: "Reset your password",
            html: PASSWORD_RESET_REQUEST_TEMPLATE.replace("{resetURL}", resetURL),
            category: "Password Reset",
        });

    }catch(error){
        console.error(`Error sending password reset email`, error);

        throw new Error(`Error sending password reset email: ${error}`);
    }
}

export const sendResetSuccessEmail = async(email) => {
    const recipient = [{email}];

    try{
        const response = await mailtrapClient.send({
            from: sender,
            to: recipient,
            subject: "Password Reset Successfull",
            html: PASSWORD_RESET_SUCCESS_TEMPLATE,
            category: "Password Reset",
        });
        console.log("Password reset email sent successfully", response);
    }catch(error){
        console.error(`Error sending password reset success email`, error);
        throw new Error(`Error sending password reset success email: ${error}`);
    }
}


emailTemplate.js
export const VERIFICATION_EMAIL_TEMPLATE = 
`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify Your Email</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
            margin: 0;
            padding: 0;
        }
        .email-container {
            max-width: 600px;
            margin: 20px auto;
            background-color: #ffffff;
            border: 1px solid #dddddd;
            border-radius: 8px;
            overflow: hidden;
        }
        .header {
            background-color: #4caf50;
            color: white;
            text-align: center;
            padding: 20px;
        }
        .content {
            padding: 20px;
            text-align: center;
        }
        .content p {
            font-size: 16px;
            line-height: 1.5;
            color: #333333;
        }
        .verification-code {
            display: inline-block;
            margin: 20px auto;
            padding: 10px 20px;
            font-size: 20px;
            font-weight: bold;
            color: #ffffff;
            background-color: #4caf50;
            border-radius: 4px;
            text-decoration: none;
        }
        .footer {
            text-align: center;
            font-size: 12px;
            color: #777777;
            padding: 10px;
            border-top: 1px solid #dddddd;
        }
    </style>
</head>
<body>
    <div class="email-container">
        <div class="header">
            <h1>Email Verification</h1>
        </div>
        <div class="content">
            <p>Thank you for registering with us!</p>
            <p>Your verification code is:</p>
            <p class="verification-code">{verificationCode}</p>
            <p>Please use this code to complete your email verification. If you didn’t request this, please ignore this email.</p>
        </div>
        <div class="footer">
            <p>&copy; 2025 Your Company. All Rights Reserved.</p>
        </div>
    </div>
</body>
</html>
`;

export const WELCOME_EMAIL_TEMPLATE = `
  <div style="font-family: Arial, sans-serif; line-height: 1.6;">
    <h2>Welcome to Company name, {username}!</h2>
    <p>
      We are thrilled to have you onboard. At Company name, we strive to make services accessible and convenient for everyone.
    </p>
    <p>
      Start exploring our services today and experience a new way of managing your needs.
    </p>
    <p>
      If you have any questions or need assistance, feel free to reach out to our support team.
    </p>
    <p>Best regards,</p>
    <p>The Company name Team</p>
  </div>
`;

export const PASSWORD_RESET_REQUEST_TEMPLATE = `
  <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px;">
    <h2 style="color: #333; text-align: center;">Password Reset Request</h2>
    <p>Hello,</p>
    <p>We received a request to reset your password. Click the button below to proceed:</p>
    <div style="text-align: center; margin: 20px 0;">
      <a href="{resetURL}" style="background-color: #007bff; color: white; padding: 12px 20px; text-decoration: none; border-radius: 5px; font-size: 16px;">Reset Password</a>
    </div>
    <p>If you did not request this, please ignore this email. Your password will remain unchanged.</p>
    <p>For security reasons, this link will expire in <strong>1 hour</strong>.</p>
    <p>Best regards,</p>
    <p><strong>Your Company Team</strong></p>
  </div>
`;


export const PASSWORD_RESET_SUCCESS_TEMPLATE = `
  <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px;">
    <h2 style="color: #333; text-align: center;">Password Reset Successful</h2>
    <p>Hello,</p>
    <p>Your password has been successfully reset. You can now log in using your new password.</p>
    <div style="text-align: center; margin: 20px 0;">
      <a href="{loginURL}" style="background-color: #28a745; color: white; padding: 12px 20px; text-decoration: none; border-radius: 5px; font-size: 16px;">Login Now</a>
    </div>
    <p>If you did not perform this action, please contact our support team immediately.</p>
    <p>Best regards,</p>
    <p><strong>Your Company Team</strong></p>
  </div>
`;

mailtrap.config.js
// const { MailtrapClient } = require("mailtrap");
import { MailtrapClient } from "mailtrap";
import dotenv from "dotenv";

dotenv.config(); 
// const ENDPOINT = process.env.MAILTRAP_ENDPOINT;
export const mailtrapClient = new MailtrapClient({
  token: process.env.MAILTRAP_TOKEN
});

export const sender = {
  email: "hello@demomailtrap.com",
  name: "Mailtrap Test"
};


./middleware
verifyToken.js
import jwt from "jsonwebtoken";

export const verifyToken = (req, res, next) => {
    const token = req.cookies.token;
    if(!token) return res.status(401).json({success : false, message: "Unauthorized - no token provided"})
    
    try{
        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        if(!decoded) return res.status(401).json({success: false, message: "UNauthorized - invalid token"});

        console.log("DecodedId: ",decoded);
        req.userId = decoded.userId;

        next();

    }catch(error) {
        console.log("Error in verifyToken ", error);
        return res.status(500).json({success: false, message: "Server error"});
    }
}

./models
user.model.js
import mongoose from "mongoose"; 

const userSchema = new mongoose.Schema({
  username: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  phone: { type: String, required: true },
  address: {
    street: { type: String },
    city: { type: String },
    state: { type: String },
    zipCode: { type: String },
  },
  currentLocation: {
    latitude: { type: Number },
    longitude: { type: Number },
  },
  refreshToken: { type: String },

  lastlogin: {
    type: Date,
    default : Date.now
  },

  isVerified:{
    type : Boolean,
    default: false
  },
  resetPasswordToken: String,
  resetPasswordExpiresAt: Date,
  verificationToken: String,
  verificationTokenExpiresAt: Date,
}, {timestamps: true});

export const User = mongoose.model("User", userSchema);


./router
user.router.js
// import express from "express";
// import { registerUser, loginUser, logoutUser, refreshAccessToken, getCurrentUser, updateAccountDetails, getAllUsers, changeCurrentPassword } from "../controllers/user.controllers.js";
// import { verifyJWT } from "../middlewares/auth.middleware.js";

// const router = express.Router();

// // Public Routes
// router.post("/register", registerUser);
// router.post("/login", loginUser);
// router.post("/logout",verifyJWT, logoutUser);
// router.post("/refresh", refreshAccessToken);

// // Protected Routes
// router.get("/current", verifyJWT, getCurrentUser);
// router.put("/update", verifyJWT, updateAccountDetails);
// router.put("/change-password", verifyJWT, changeCurrentPassword);

// // Route to get all users (can be protected or public depending on your requirements)
// router.get("/all", getAllUsers);  // Use verifyJWT middleware for protected routes if needed

// export default router;

import express from "express";
import {signup, verifyEmail, login, logout, forgotPassword, resetPassword, checkAuth } from "../controllers/auth.controllers.js";
import { verifyToken } from "../middlewares/verifyToken.js";

const router = express.Router();

router.get("/check-auth", verifyToken, checkAuth);
router.post("/signup", signup);

router.post("/login", login);
router.post("/logout", logout);

router.post("/verify-email", verifyEmail);

router.post("/forgot-password", forgotPassword);
router.post("/reset-password/:token", resetPassword);

export default router;

./utils
generateAccessAndSetCookie.js
import jwt from "jsonwebtoken"

export const generateTokenAndSetCookie = (res, userId) => {
    const token = jwt.sign({userId}, process.env.JWT_SECRET, {expiresIn: "7d"});

    res.cookie("token", token, {
        httpsOnly: true,
        secure: process.env.NODE_ENV === "production",
        samesite: "strict",
        maxAge: 7 * 24 * 60 * 60 * 1000,
    });

    return token;
}